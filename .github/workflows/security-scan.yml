name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        scan-type: 'fs'
        ignore-unfixed: true
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        timeout: '10m'
        
    - name: Upload Trivy scan results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif
        category: trivy
        
    - name: Install Python security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety pip-audit

    - name: Run bandit and convert to SARIF
      continue-on-error: true
      run: |
        # Run bandit with JSON output
        bandit -r ./ -ll -ii -f json -o bandit-results.json
        
        # Create base SARIF file
        cat > bandit-results.sarif << EOF
        {
          "\$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
          "version": "2.1.0",
          "runs": [
            {
              "tool": {
                "driver": {
                  "name": "Bandit",
                  "informationUri": "https://github.com/PyCQA/bandit",
                  "rules": []
                }
              },
              "results": []
            }
          ]
        }
        EOF
        
        # Convert results if bandit output exists
        if [ -f bandit-results.json ]; then
          # Extract results and store in temporary file
          jq '.results[] | {
            "ruleId": .test_id,
            "level": (if .issue_severity == "HIGH" then "error"
                     elif .issue_severity == "MEDIUM" then "warning"
                     else "note" end),
            "message": {
              "text": .issue_text
            },
            "locations": [{
              "physicalLocation": {
                "artifactLocation": {
                  "uri": .filename
                },
                "region": {
                  "startLine": .line_number
                }
              }
            }]
          }' bandit-results.json | jq -s '.' > temp-results.json
          
          # Merge results into SARIF file
          jq -s '.[0].runs[0].results = .[1] | .[0]' bandit-results.sarif temp-results.json > temp.sarif
          mv temp.sarif bandit-results.sarif
          rm temp-results.json
        fi
        
    - name: Upload bandit scan results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: bandit-results.sarif
        category: bandit

    - name: Run safety check
      continue-on-error: true
      run: |
        safety check --output json > safety-results.json

    - name: Run pip-audit
      continue-on-error: true
      run: |
        pip-audit --format json > pip-audit-results.json

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: codeql

    - name: Generate Security Report
      if: always()
      run: |
        echo "# Security Scan Summary" > security-report.md
        echo "## Scan Results" >> security-report.md
        echo "- Date: $(date)" >> security-report.md
        echo "- Branch: ${{ github.ref }}" >> security-report.md
        
        echo "### Trivy Scan Results" >> security-report.md
        if [ -f trivy-results.sarif ]; then
          echo "\`\`\`json" >> security-report.md
          jq '.' trivy-results.sarif >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi
        
        echo "### Bandit Results" >> security-report.md
        if [ -f bandit-results.json ]; then
          echo "\`\`\`json" >> security-report.md
          jq '.' bandit-results.json >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi
        
        echo "### Safety Check Results" >> security-report.md
        if [ -f safety-results.json ]; then
          echo "\`\`\`json" >> security-report.md
          cat safety-results.json >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi

        echo "### pip-audit Results" >> security-report.md
        if [ -f pip-audit-results.json ]; then
          echo "\`\`\`json" >> security-report.md
          cat pip-audit-results.json >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi

    - name: Upload Security Reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          security-report.md
          *-results.json
          *-results.sarif